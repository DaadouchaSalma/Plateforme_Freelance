# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Experience {
  id: Float!
  nomSociete: String!
  nomProjet: String!
  dateDebut: String!
  dateFin: String
  description: String
  candidature: Candidature!
}

type Categorie {
  id: Float!
  title: String!
}

type Feedback {
  id: Float!
  rating: Float!
  comment: String!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  email: String!
  password: String!
  role: String!
}

type Client {
  id: Float!
  nom: String!
  photo: String!
  user: User!
}

type Offer {
  id: Float!
  title: String!
  description: String!
  budget: Float!
  startDate: DateTime!
  endDate: DateTime!
  status: String!
  client: Client!
  categorie: Categorie!
}

type Candidature {
  id: Float!
  motivation: String!
  statut: String!
  dateApplication: String!
  freelancer: Freelancer!
  offer: Offer!
  experiences: [Experience!]
}

type Competence {
  id: Int!
  nom: String!
}

type FreelancerCompetence {
  id: Int
  niveau: String
  freelancer: Freelancer!
  competence: Competence!
}

type LienProf {
  id: Int!
  type: String!
  url: String!
}

type Freelancer {
  id: Float!
  nom: String!
  prenom: String!
  photo: String!
  bio: String
  disponibilite: Boolean
  FreelancerCompetences: [FreelancerCompetence!]!
  liens: [LienProf!]!
  candidatures: Candidature!
  sentFeedbacks: Feedback!
  receivedFeedbacks: Feedback!
  user: User!
}

type Query {
  allFreelancers: [Freelancer!]!
  freelancerById(id: Int!): Freelancer
  myCandidatures: [Candidature!]!
  candidaturesByOffre(offreId: Int!): [Candidature!]!
  hello: String!
}

type Mutation {
  updateFreelancer(nom: String, prenom: String, photo: String, bio: String, disponibilite: Boolean): Freelancer!
  updateStatutCandidature(candidatureId: Int!, statut: String!): Candidature!
  accepterCandidature(id: Int!): Candidature!
  rejeterCandidature(id: Int!): Candidature!
  createCandidature(input: MinimalCandidatureInput!): Candidature!
  login(email: String!, password: String!): String!
  registerClient(email: String!, password: String!, nom: String!, photo: String!): User!
  registerFreelancer(email: String!, password: String!, nom: String!, prenom: String!, photo: Upload!, bio: String): User!
}

input MinimalCandidatureInput {
  motivation: String!
  statut: String!
  dateApplication: String!
  offerId: Int!
  experiences: [ExperienceInput!]
}

input ExperienceInput {
  nomSociete: String!
  nomProjet: String!
  dateDebut: String!
  dateFin: String
  description: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload