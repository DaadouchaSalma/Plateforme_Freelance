# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Experience {
  id: Float!
  nomSociete: String!
  nomProjet: String!
  dateDebut: String!
  dateFin: String
  description: String
  candidature: Candidature!
}

type Categorie {
  id: Float!
  title: String!
}

type Feedback {
  id: Float!
  rating: Float!
  comment: String!
  createdAt: DateTime!
  senderfreelancer: Freelancer
  senderClient: Client
  receiverfreelancer: Freelancer
  receiverClient: Client
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Message {
  id: Int!
  content: String!
  sender: User!
  receiver: User!
  createdAt: DateTime!
}

type User {
  id: ID!
  email: String!
  password: String!
  role: String!
  freelancer: Freelancer
  client: Client
}

type Client {
  id: Float!
  nom: String!
  photo: String!
  about: String!
  adresse: String!
  codePostal: String!
  tel: String!
  siteweb: String!
  domaine: String!
  user: User!
}

type FreelancerCompetence {
  id: Int
  niveau: String
  freelancer: Freelancer!
  competence: Competence!
}

type Competence {
  id: Int!
  nom: String!
  FreelancerCompetences: [FreelancerCompetence!]
}

type Offer {
  id: Float!
  title: String!
  description: String!
  budget: Float!
  startDate: DateTime!
  endDate: DateTime!
  status: String!
  client: Client!
  categorie: Categorie!
  createdAt: DateTime!
  competences: [Competence!]!
}

type Candidature {
  id: Float!
  motivation: String!
  statut: String!
  dateApplication: String!
  freelancer: Freelancer!
  offer: Offer!
  experiences: [Experience!]
}

type LienProf {
  id: Int!
  type: String!
  url: String!
}

type Freelancer {
  id: Float!
  nom: String!
  prenom: String!
  photo: String!
  bio: String
  disponibilite: Boolean
  FreelancerCompetences: [FreelancerCompetence!]!
  liens: [LienProf!]!
  candidatures: Candidature!
  sentFeedbacks: Feedback!
  receivedFeedbacks: Feedback!
  user: User!
}

type Stats {
  clients: Int!
  freelancers: Int!
  activeOffers: Int!
  candidatures: Int!
}

type CategorieStats {
  categorie: String!
  nombre: Int!
}

type TopFreelancerStat {
  nom: String!
  prenom: String!
  photo: String!
  nombre: Int!
}

type CompetenceStat {
  nom: String!
  count: Float!
  percentage: Float!
}

type WeeklyActivityStat {
  day: String!
  offers: Float!
  candidatures: Float!
}

type DomaineStat {
  domaine: String!
  totalClients: Float!
}

type Query {
  allFreelancers: [Freelancer!]!
  freelancerById(id: Int!): Freelancer
  meFreelancer: Freelancer
  getCompetences: [Competence!]!
  allClients: [Client!]!
  clientById(id: Int!): Client
  getCurrentClient: Client
  getOfferById(id: Int!): Offer!
  offers: [Offer!]!
  offersForClient: [Offer!]!
  myCandidatures: [Candidature!]!
  candidaturesByOffre(offreId: Int!): [Candidature!]!
  getAllCategories: [Categorie!]!
  getMyFeedbacks: [Feedback!]!
  getFeedbacksByUserId(userId: Int!, userType: String!): [Feedback!]!
  me: User!
  getConversation(withUserId: Int!): [Message!]!
  getAvailableContacts: [User!]!
  getStats: Stats!
  getOffresParCategorie: [CategorieStats!]!
  getTopFreelancers: [TopFreelancerStat!]!
  getCompetenceStats: [CompetenceStat!]!
  getActivityByWeekday: [WeeklyActivityStat!]!
  getClientStatsByDomaine: [DomaineStat!]!
}

type Mutation {
  updateFreelancer(nom: String, prenom: String, photo: Upload, bio: String, disponibilite: Boolean, liensProf: [LienProfInput!], competences: [Int!], niveaux: [String!]): Freelancer!
  createCompetence(nom: String!): Competence!
  updateClient(nom: String, photo: String, about: String, adresse: String, codePostal: String, tel: String, siteweb: String, domaine: String): Client!
  createOffer(title: String!, description: String!, budget: Float!, startDate: String!, endDate: String!, status: String!, competenceIds: [Int!]!, categorieId: Int!): Offer!
  updateOffer(id: Int!, title: String, description: String, budget: Int, startDate: DateTime, endDate: DateTime, status: String, categorieId: Int): Offer!
  deleteOffer(offerId: Int!): Boolean!
  updateStatutCandidature(candidatureId: Int!, statut: String!): Candidature!
  accepterCandidature(id: Int!): Candidature!
  rejeterCandidature(id: Int!): Candidature!
  createCandidature(input: MinimalCandidatureInput!): Candidature!
  createCategorie(title: String!): Categorie!
  createFeedback(receiverId: Int!, receiverType: String!, rating: Float!, comment: String!): Feedback!
  login(email: String!, password: String!): String!
  registerClient(email: String!, password: String!, nom: String!, photo: Upload!, adresse: String!, about: String!, codePostal: String!, tel: String!, siteweb: String!, domaine: String!): User!
  registerFreelancer(email: String!, password: String!, nom: String!, prenom: String!, photo: Upload!, liensProf: [LienProfInput!]!, competences: [Int!]!, niveaux: [String!]!, disponibilite: Boolean!, bio: String): User!
  sendMessage(createMessageInput: CreateMessageInput!): Message!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input LienProfInput {
  id: Int
  type: String!
  url: String!
}

input MinimalCandidatureInput {
  motivation: String!
  statut: String!
  dateApplication: String!
  offerId: Int!
  experiences: [ExperienceInput!]
}

input ExperienceInput {
  nomSociete: String!
  nomProjet: String!
  dateDebut: String!
  dateFin: String
  description: String
}

input CreateMessageInput {
  content: String!
  receiverId: Int!
}